local util = require("spec.util")

describe("build.tl", function()
   it("defaults to the generated_code folder", function()
      util.run_mock_project(finally, {
         dir_structure = {
            ["tlconfig.lua"] = [[return {
               build_dir = "build",
            }]],
            ["foo.tl"] = [[print(require("generated_code/generated"))]],
            ["build.tl"] = [[
               return {
                  gen_code = function(path:string) 
                     local file = io.open(path .. "/generated.tl", "w")
                     file:write('return "Hello from script generated by build.tl"')
                     file:close()
                  end
                  
               }
            ]],
            ["bar.tl"] = [[print "bar"]],
         },
         cmd = "build",
         generated_files = {
            ["build"] = {
               "build.lua",
               "foo.lua",
               "bar.lua",
               ["generated_code"] = {
                     "generated.lua"
               }
            }
         },
      })
   end)
   it("can have the location it stores altered by setting build_file_output_dir", function()
      util.run_mock_project(finally, {
         dir_structure = {
            ["tlconfig.lua"] = [[return {
               build_dir = "build",
               build_file_output_dir = "other_generated_code"
            }]],
            ["foo.tl"] = [[print(require("other_generated_code/generated"))]],
            ["build.tl"] = [[
                return {
                    gen_code = function(path:string) 
                        local file = io.open(path .. "/generated.tl", "w")
                        file:write('return "Hello from script generated by build.tl"')
                        file:close()
                    end
                }]],
            ["bar.tl"] = [[print "bar"]],
         },
         cmd = "build",
         generated_files = {
            ["build"] = {
               "build.lua",
               "foo.lua",
               "bar.lua",
               ["other_generated_code"] = {
                   "generated.lua"
               }
            }
         },
      })
   end)
   it("can have a diffrent name by setting build_file", function()
      util.run_mock_project(finally,{
         dir_structure = {
            ["tlconfig.lua"] = [[return {
               build_dir = "build",
               build_file="other_name.tl"
            }]],
            ["foo.tl"] = [[print(require("generated_code/generated"))]],
            ["other_name.tl"] = [[
               return {
                  gen_code = function(path:string) 
                     local file = io.open(path .. "/generated.tl", "w")
                     file:write('return "Hello from script generated by build.tl"')
                     file:close()
                  end
               }
            ]],
            ["bar.tl"] = [[print "bar"]],
         },
         cmd = "build",
         generated_files = {
            ["build"] = {
               "other_name.lua",
               "foo.lua",
               "bar.lua",
               ["generated_code"] = {
                  "generated.lua"
               }
            }
         }
      })
   end)
   it("Should give an error if the build script contains invalid teal", function()
      util.run_mock_project(finally, {
         dir_structure = {
            ["tlconfig.lua"] = [[return {
               build_dir = "build",
            }]],
            ["foo.tl"] = [[print(require("generated_code/generated"))]],
            ["build.tl"] = [[
               {
                  gen_code = function(path:string) 
                     local file = io.open(path .. "/generated.tl", "w")
                     file:write('return "Hello from script generated by build.tl"')
                     file:close()
                  end
                  
               }
            ]],
            ["bar.tl"] = [[print "bar"]],
         },
         cmd = "build",
         cmd_output=
[[A build file is detected, but build_file_output_dir is not set. Defaulting to ./generated_code
========================================
1 syntax error:
./build.tl:8:17: syntax error
]]
      })
   end)
   it("Should give an error if the key gen_code exists, but it is not a function", function()
      util.run_mock_project(finally, {
         dir_structure = {
            ["tlconfig.lua"] = [[return {
               build_dir = "build",
            }]],
            ["foo.tl"] = [[print(require("generated_code/generated"))]],
            ["build.tl"] = [[
               return {
                  gen_code = "I am a string"
                  
               }
            ]],
            ["bar.tl"] = [[print "bar"]],
         },
         cmd = "build",
         cmd_output=
[[A build file is detected, but build_file_output_dir is not set. Defaulting to ./generated_code
the key "gen_code" exists in the build file, but it is not a function. Value: I am a string
]]
      })
   end)
end)
